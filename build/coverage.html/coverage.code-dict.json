{"/home/travis/build/npmtest/node-npmtest-postcss-import/test.js":"/* istanbul instrument in package npmtest_postcss_import */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-postcss-import/lib.npmtest_postcss_import.js":"/* istanbul instrument in package npmtest_postcss_import */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_postcss_import = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_postcss_import = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-postcss-import/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-postcss-import && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_postcss_import */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_postcss_import\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_postcss_import.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_postcss_import.rollup.js'] =\n            local.assetsDict['/assets.npmtest_postcss_import.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_postcss_import.__dirname + '/lib.npmtest_postcss_import.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-postcss-import/node_modules/postcss-import/index.js":"var path = require(\"path\")\nvar assign = require(\"object-assign\")\nvar postcss = require(\"postcss\")\nvar joinMedia = require(\"./lib/join-media\")\nvar resolveId = require(\"./lib/resolve-id\")\nvar loadContent = require(\"./lib/load-content\")\nvar processContent = require(\"./lib/process-content\")\nvar parseStatements = require(\"./lib/parse-statements\")\nvar promiseEach = require(\"promise-each\")\n\nfunction AtImport(options) {\n  options = assign({\n    root: process.cwd(),\n    path: [],\n    skipDuplicates: true,\n    resolve: resolveId,\n    load: loadContent,\n    plugins: [],\n    addModulesDirectories: [],\n  }, options)\n\n  options.root = path.resolve(options.root)\n\n  // convert string to an array of a single element\n  if (typeof options.path === \"string\") {\n    options.path = [ options.path ]\n  }\n\n  if (!Array.isArray(options.path)) {\n    options.path = []\n  }\n\n  options.path = options.path.map(function(p) {\n    return path.resolve(options.root, p)\n  })\n\n  return function(styles, result) {\n    var state = {\n      importedFiles: {},\n      hashFiles: {},\n    }\n\n    if (styles.source && styles.source.input && styles.source.input.file) {\n      state.importedFiles[styles.source.input.file] = {}\n    }\n\n    if (options.plugins && !Array.isArray(options.plugins)) {\n      throw new Error(\"plugins option must be an array\")\n    }\n\n    return parseStyles(\n      result,\n      styles,\n      options,\n      state,\n      []\n    ).then(function(bundle) {\n\n      applyRaws(bundle)\n      applyMedia(bundle)\n      applyStyles(bundle, styles)\n\n      if (\n        typeof options.addDependencyTo === \"object\" &&\n        typeof options.addDependencyTo.addDependency === \"function\"\n      ) {\n        console.warn([\n          \"addDependencyTo is deprecated in favor of\",\n          \"result.messages.dependency; postcss-loader >= v1.0.0 will\",\n          \"automatically add your imported files to webpack's file watcher.\",\n          \"For more information, see\",\n          \"https://github.com/postcss/postcss-import\\\n          #dependency-message-support\",\n        ].join(\"\\n\"))\n        Object.keys(state.importedFiles)\n        .forEach(options.addDependencyTo.addDependency)\n      }\n\n      if (typeof options.onImport === \"function\") {\n        options.onImport(Object.keys(state.importedFiles))\n      }\n    })\n  }\n}\n\nfunction applyRaws(bundle) {\n  bundle.forEach(function(stmt, index) {\n    if (index === 0) {\n      return\n    }\n\n    if (stmt.parent) {\n      var before = stmt.parent.node.raws.before\n      if (stmt.type === \"nodes\") {\n        stmt.nodes[0].raws.before = before\n      }\n      else {\n        stmt.node.raws.before = before\n      }\n    }\n    else if (stmt.type === \"nodes\") {\n      stmt.nodes[0].raws.before = stmt.nodes[0].raws.before || \"\\n\"\n    }\n  })\n}\n\nfunction applyMedia(bundle) {\n  bundle.forEach(function(stmt) {\n    if (!stmt.media.length) {\n      return\n    }\n    if (stmt.type === \"import\") {\n      stmt.node.params = stmt.fullUri + \" \" + stmt.media.join(\", \")\n    }\n    else if (stmt.type ===\"media\") {\n      stmt.node.params = stmt.media.join(\", \")\n    }\n    else {\n      var nodes = stmt.nodes\n      var parent = nodes[0].parent\n      var mediaNode = postcss.atRule({\n        name: \"media\",\n        params: stmt.media.join(\", \"),\n        source: parent.source,\n      })\n\n      parent.insertBefore(nodes[0], mediaNode)\n\n      // remove nodes\n      nodes.forEach(function(node) {\n        node.parent = undefined\n      })\n\n      // better output\n      nodes[0].raws.before = nodes[0].raws.before || \"\\n\"\n\n      // wrap new rules with media query\n      mediaNode.append(nodes)\n\n      stmt.type = \"media\"\n      stmt.node = mediaNode\n      delete stmt.nodes\n    }\n  })\n}\n\nfunction applyStyles(bundle, styles) {\n  styles.nodes = []\n\n  bundle.forEach(function(stmt) {\n    if (stmt.type === \"import\") {\n      stmt.node.parent = undefined\n      styles.append(stmt.node)\n    }\n    else if (stmt.type === \"media\") {\n      stmt.node.parent = undefined\n      styles.append(stmt.node)\n    }\n    else if (stmt.type === \"nodes\") {\n      stmt.nodes.forEach(function(node) {\n        node.parent = undefined\n        styles.append(node)\n      })\n    }\n  })\n}\n\nfunction parseStyles(\n  result,\n  styles,\n  options,\n  state,\n  media\n) {\n  var statements = parseStatements(result, styles)\n\n  return Promise.resolve(statements).then(promiseEach(function(stmt) {\n    stmt.media = joinMedia(media, stmt.media || [])\n\n    // skip protocol base uri (protocol://url) or protocol-relative\n    if (stmt.type !== \"import\" || /^(?:[a-z]+:)?\\/\\//i.test(stmt.uri)) {\n      return\n    }\n    return resolveImportId(\n      result,\n      stmt,\n      options,\n      state\n    )\n  })).then(function() {\n    var imports = []\n    var bundle = []\n\n    // squash statements and their children\n    statements.forEach(function(stmt) {\n      if (stmt.type === \"import\") {\n        if (stmt.children) {\n          stmt.children.forEach(function(child, index) {\n            if (child.type === \"import\") {\n              imports.push(child)\n            }\n            else {\n              bundle.push(child)\n            }\n            // For better output\n            if (index === 0) {\n              child.parent = stmt\n            }\n          })\n        }\n        else {\n          imports.push(stmt)\n        }\n      }\n      else if (stmt.type === \"media\" || stmt.type === \"nodes\") {\n        bundle.push(stmt)\n      }\n    })\n\n    return imports.concat(bundle)\n  })\n}\n\nfunction resolveImportId(\n  result,\n  stmt,\n  options,\n  state\n) {\n  var atRule = stmt.node\n  var sourceFile\n  if (atRule.source && atRule.source.input && atRule.source.input.file) {\n    sourceFile = atRule.source.input.file\n  }\n  var base = sourceFile\n    ? path.dirname(atRule.source.input.file)\n    : options.root\n\n  return Promise.resolve(options.resolve(stmt.uri, base, options))\n  .then(function(paths) {\n    if (!Array.isArray(paths)) {\n      paths = [ paths ]\n    }\n\n    return Promise.all(paths.map(function(file) {\n      // Ensure that each path is absolute:\n      if (!path.isAbsolute(file)) return resolveId(file, base, options)\n      return file\n    }))\n  })\n  .then(function(resolved) {\n    // Add dependency messages:\n    resolved.forEach(function(file) {\n      result.messages.push({\n        type: \"dependency\",\n        file: file,\n        parent: sourceFile,\n      })\n    })\n\n    return Promise.all(resolved.map(function(file) {\n      return loadImportContent(\n        result,\n        stmt,\n        file,\n        options,\n        state\n      )\n    }))\n  })\n  .then(function(result) {\n    // Merge loaded statements\n    stmt.children = result.reduce(function(result, statements) {\n      if (statements) {\n        result = result.concat(statements)\n      }\n      return result\n    }, [])\n  })\n  .catch(function(err) {\n    if (err.message.indexOf(\"Failed to find\") !== -1) throw err\n    result.warn(err.message, { node: atRule })\n  })\n}\n\nfunction loadImportContent(\n  result,\n  stmt,\n  filename,\n  options,\n  state\n) {\n  var atRule = stmt.node\n  var media = stmt.media\n  if (options.skipDuplicates) {\n    // skip files already imported at the same scope\n    if (\n      state.importedFiles[filename] &&\n      state.importedFiles[filename][media]\n    ) {\n      return\n    }\n\n    // save imported files to skip them next time\n    if (!state.importedFiles[filename]) {\n      state.importedFiles[filename] = {}\n    }\n    state.importedFiles[filename][media] = true\n  }\n\n  return Promise.resolve(options.load(filename, options))\n  .then(function(content) {\n    if (content.trim() === \"\") {\n      result.warn(filename + \" is empty\", { node: atRule })\n      return\n    }\n\n    // skip previous imported files not containing @import rules\n    if (\n      state.hashFiles[content] &&\n      state.hashFiles[content][media]\n    ) {\n      return\n    }\n\n    return processContent(\n      result,\n      content,\n      filename,\n      options\n    )\n    .then(function(importedResult) {\n      var styles = importedResult.root\n      result.messages = result.messages.concat(importedResult.messages)\n\n      if (options.skipDuplicates) {\n        var hasImport = styles.some(function(child) {\n          return child.type === \"atrule\" && child.name === \"import\"\n        })\n        if (!hasImport) {\n          // save hash files to skip them next time\n          if (!state.hashFiles[content]) {\n            state.hashFiles[content] = {}\n          }\n          state.hashFiles[content][media] = true\n        }\n      }\n\n      // recursion: import @import from imported file\n      return parseStyles(\n        result,\n        styles,\n        options,\n        state,\n        media\n      )\n    })\n  })\n}\n\nmodule.exports = postcss.plugin(\n  \"postcss-import\",\n  AtImport\n)\n","/home/travis/build/npmtest/node-npmtest-postcss-import/node_modules/postcss-import/lib/join-media.js":"module.exports = function(parentMedia, childMedia) {\n  if (!parentMedia.length && childMedia.length) {\n    return childMedia\n  }\n  if (parentMedia.length && !childMedia.length) {\n    return parentMedia\n  }\n  if (!parentMedia.length && !childMedia.length) {\n    return []\n  }\n\n  var media = []\n\n  parentMedia.forEach(function(parentItem) {\n    childMedia.forEach(function(childItem) {\n      if (parentItem !== childItem) {\n        media.push(parentItem + \" and \" + childItem)\n      }\n    })\n  })\n\n  return media\n}\n","/home/travis/build/npmtest/node-npmtest-postcss-import/node_modules/postcss-import/lib/resolve-id.js":"var resolve = require(\"resolve\")\nvar jspmResolve\n// Works around https://github.com/jspm/jspm-cli/pull/1779 is released\ntry {\n  jspmResolve = require(\"pkg-resolve\")\n}\ncatch (ex) {\n  // pass\n}\n\nvar moduleDirectories = [\n  \"web_modules\",\n  \"node_modules\",\n]\n\nfunction resolveModule(id, opts) {\n  return new Promise(function(res, rej) {\n    resolve(id, opts, function(err, path) {\n      if (err) {\n        return rej(err)\n      }\n      res(path)\n    })\n  })\n}\n\nmodule.exports = function(id, base, options) {\n  var paths = options.path\n\n  var resolveOpts = {\n    basedir: base,\n    moduleDirectory: moduleDirectories.concat(options.addModulesDirectories),\n    paths: paths,\n    extensions: [ \".css\" ],\n    packageFilter: function processPackage(pkg) {\n      if (pkg.style) {\n        pkg.main = pkg.style\n      }\n      else if (!pkg.main || !/\\.css$/.test(pkg.main)) {\n        pkg.main = \"index.css\"\n      }\n      return pkg\n    },\n  }\n\n  return resolveModule(\"./\" + id, resolveOpts)\n  .catch(function() {\n    return resolveModule(id, resolveOpts)\n  })\n  .catch(function() {\n    return jspmResolve.default(id, {\n      basedir: resolveOpts.basedir,\n      extensions : resolveOpts.extensions,\n    })\n  })\n  .catch(function() {\n    if (paths.indexOf(base) === -1) {\n      paths.unshift(base)\n    }\n\n    throw new Error([\n      \"Failed to find '\" + id + \"'\",\n      \"in [ \",\n      \"    \" + paths.join(\",\\n        \"),\n      \"]\",\n    ].join(\"\\n    \"))\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-postcss-import/node_modules/postcss-import/lib/load-content.js":"var readCache = require(\"read-cache\")\n\nmodule.exports = function(filename) {\n  return readCache(filename, \"utf-8\")\n}\n","/home/travis/build/npmtest/node-npmtest-postcss-import/node_modules/postcss-import/lib/process-content.js":"var path = require(\"path\")\nvar postcss = require(\"postcss\")\nvar sugarss\n\nmodule.exports = function processContent(\n  result,\n  content,\n  filename,\n  options\n) {\n  var plugins = options.plugins\n  var ext = path.extname(filename)\n\n  var parserList = []\n\n  // SugarSS support:\n  if (ext === \".sss\") {\n    if (!sugarss) {\n      try {\n        sugarss = require(\"sugarss\")\n      }\n      catch (e) {\n        // Ignore\n      }\n    }\n    if (sugarss) return runPostcss(content, filename, plugins, [ sugarss ])\n  }\n\n  // Syntax support:\n  if (result.opts.syntax && result.opts.syntax.parse) {\n    parserList.push(result.opts.syntax.parse)\n  }\n\n  // Parser support:\n  if (result.opts.parser) parserList.push(result.opts.parser)\n  // Try the default as a last resort:\n  parserList.push(null)\n\n  return runPostcss(content, filename, plugins, parserList)\n}\n\nfunction runPostcss(\n  content,\n  filename,\n  plugins,\n  parsers,\n  index\n) {\n  if (!index) index = 0\n  return postcss(plugins).process(content, {\n    from: filename,\n    parser: parsers[index],\n  })\n  .catch(function(err) {\n    // If there's an error, try the next parser\n    index++\n    // If there are no parsers left, throw it\n    if (index === parsers.length) throw err\n    return runPostcss(content, filename, plugins, parsers, index)\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-postcss-import/node_modules/postcss-import/lib/parse-statements.js":"var valueParser = require(\"postcss-value-parser\")\nvar stringify = valueParser.stringify\n\nfunction split(params, start) {\n  var list = []\n  var last = params.reduce(function(item, node, index) {\n    if (index < start) {\n      return \"\"\n    }\n    if (node.type === \"div\" && node.value === \",\") {\n      list.push(item)\n      return \"\"\n    }\n    return item + stringify(node)\n  }, \"\")\n  list.push(last)\n  return list\n}\n\nmodule.exports = function(result, styles) {\n  var statements = []\n  var nodes = []\n\n  styles.each(function(node) {\n    var stmt\n    if (node.type === \"atrule\") {\n      if (node.name === \"import\") {\n        stmt = parseImport(result, node)\n      }\n      else if (node.name === \"media\") {\n        stmt = parseMedia(result, node)\n      }\n    }\n\n    if (stmt) {\n      if (nodes.length) {\n        statements.push({\n          type: \"nodes\",\n          nodes: nodes,\n          media: [],\n        })\n        nodes = []\n      }\n      statements.push(stmt)\n    }\n    else {\n      nodes.push(node)\n    }\n  })\n\n  if (nodes.length) {\n    statements.push({\n      type: \"nodes\",\n      nodes: nodes,\n      media: [],\n    })\n  }\n\n  return statements\n}\n\nfunction parseMedia(result, atRule) {\n  var params = valueParser(atRule.params).nodes\n  return {\n    type: \"media\",\n    node: atRule,\n    media: split(params, 0),\n  }\n}\n\nfunction parseImport(result, atRule) {\n  var prev = getPrev(atRule)\n  if (prev) {\n    do  {\n      if (\n        prev.type !== \"atrule\" ||\n        prev.name !== \"import\" &&\n        prev.name !== \"charset\"\n      ) {\n        return result.warn(\n          \"@import must precede all other statements (besides @charset)\",\n          { node: atRule }\n        )\n      }\n      else {\n        prev = getPrev(prev)\n      }\n    } while (prev)\n  }\n\n  if (atRule.nodes) {\n    return result.warn(\n      \"It looks like you didn't end your @import statement correctly. \" +\n      \"Child nodes are attached to it.\",\n      { node: atRule }\n    )\n  }\n\n  var params = valueParser(atRule.params).nodes\n  var stmt = {\n    type: \"import\",\n    node: atRule,\n    media: [],\n  }\n\n  if (\n    !params.length ||\n    (\n      params[0].type !== \"string\" ||\n      !params[0].value\n    ) &&\n    (\n      params[0].type !== \"function\" ||\n      params[0].value !== \"url\" ||\n      !params[0].nodes.length ||\n      !params[0].nodes[0].value\n    )\n  ) {\n    return result.warn(\n      \"Unable to find uri in '\" + atRule.toString() + \"'\",\n      { node: atRule }\n    )\n  }\n\n  if (params[0].type === \"string\") {\n    stmt.uri = params[0].value\n  }\n  else {\n    stmt.uri = params[0].nodes[0].value\n  }\n  stmt.fullUri = stringify(params[0])\n\n  if (params.length > 2) {\n    if (params[1].type !== \"space\") {\n      return result.warn(\n        \"Invalid import media statement\",\n        { node: atRule }\n      )\n    }\n    stmt.media = split(params, 2)\n  }\n\n  return stmt\n}\n\nfunction getPrev(item) {\n  var prev = item.prev()\n  while (prev && prev.type === \"comment\") {\n    prev = prev.prev()\n  }\n  return prev\n}\n"}